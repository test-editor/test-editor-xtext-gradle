/*******************************************************************************
 * Copyright (c) 2012 - 2018 Signal Iduna Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Signal Iduna Corporation - initial API and implementation
 * akquinet AG
 * itemis AG
 *******************************************************************************/
grammar org.testeditor.tsl.dsl.Tsl hidden(SPACE)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.testeditor.org/tsl"

TslModel:
	{TslModel}
	// newlineing is a bit tricky here, since TestSpecifications itself may be empty
	NL*
	(('package' package=QualifiedName (NL* (SL_COMMENT | ML_COMMENT+) (NL+ (SL_COMMENT | ML_COMMENT+))*)? 
		(NL+ specification=TestSpecification)?) // this is done to ensure that the TestSpecification will always start a line
	 | ((SL_COMMENT | ML_COMMENT+) NL+)* specification=TestSpecification)
	;

/* In order to ensure that the '*' in the beginning of a line (spaces are swallowed automatically),
 * the rules are written to ensure NL before '*'. Keeping the rules somewhat readable, the name and description 
 * have to end with (one or more) NL to ensure this. The rules could be rewritten such that if no specification follows, the NL
 * is not mandatory, this will however make the grammar a lot uglier (see TslModel, which implements this for the optional package field)).
 */
TestSpecification:
	{TestSpecification}
	('#' name=ID NL+ ((SL_COMMENT | ML_COMMENT+) NL+)*)? // note that the name must be terminated with a NL (to enure * of a spec to start the line) 
	(description=Text NL+ ((SL_COMMENT | ML_COMMENT+) NL+)*)? // note that description must be terminated with a NL (to enure * of a spec to start the line)
	('*' steps+=SpecificationStep (=>(NL+ '*') steps+=SpecificationStep | NL+ ML_COMMENT | NL+ SL_COMMENT )* NL*)?
;

SpecificationStep:
	contents+=InnerStepContent+
	( (NL+ contents+=StepContent) contents+=InnerStepContent+ )*;

InnerStepContent returns StepContent:
	InnerStepContentText | StepContentVariable;
	
StepContent:
	StepContentText | StepContentVariable;

InnerStepContentText returns StepContentText:
	value=(Word | '*');

StepContentText:
	value=Word;

StepContentVariable:
	value=STRING;

Word returns ecore::EString:
	ID | INT | ANY_OTHER | '.' | '#' | '\\"' | "\\'"
;

Text returns ecore::EString hidden():
	NonEmptyTextElement ( ( SPACE | NL )* NonEmptyTextElement )* SPACE*;
	
NonEmptyTextElement returns ecore::EString hidden():
	ID | INT | STRING | ANY_OTHER | '.' | '://'
;

QualifiedName:
	ID (=> '.' ID)*;
	
terminal NL:
	'\r'? '\n';

terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '_' |  'À'..'ɿ' | 'Α'..'ѯ' | 'µ') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | 'À'..'ɿ' | 'Α'..'ѯ' | 'µ')*;

terminal INT:
	('0'..'9')+;

terminal STRING:
	'"' ('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | '"'))* '"' |
	"'" ('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | "'"))* "'";

terminal SPACE:
	(' ' | '\t');

terminal ML_COMMENT:
	'/*' -> '*/';

terminal SL_COMMENT:
	'//' !('\r'|'\n')*;

terminal ANY_OTHER:
	.;
