buildscript {
    repositories {
	    jcenter()
        mavenCentral()
	    maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
	    classpath 'org.xtext:xtext-gradle-plugin:2.0.1'
        classpath 'net.researchgate:gradle-release:2.6.0'
    }
}

subprojects {
    ext {
        xtextVersion = '2.15.0'

        coreFixtureVersion = '4.1.+'

        // xtext framework dependencies fixed to working version set
        emfCodegenVersion = '2.14.0'
        mwe2LaunchVersion = '2.9.1.201705291010'
        antlrGeneratorVersion = '[2.1.1, 3)'
        antlrRuntime = '3.2'
        emfEcoreXcore = '1.7.0' // +
        emfEcoreXcoreLib = '1.3.0' // +
        codegenEcoreXtext = '1.4.0' // +

        // used for testing
        junitVersion = '4.12'
        mockitoCoreVersion = '2.22.+'

        // for project and generator functionality
        gradleToolingApi = '4.3'
        gsonVersion = '2.8.5'
        jdtCoreVersion = '3.12.2'

        // for (some) web projects
        jettyAnnotations = '9.4.9.v20180320'
        slf4jSimple = '1.7.21'
        requirejsVersion = '2.3.2'
        jqueryVersion = '2.2.+'
        aceEditorVersion = '1.2.3'
    }

    repositories {
	    jcenter()
        mavenCentral()
        maven { url "http://dl.bintray.com/test-editor/maven/" }
    }

    apply plugin: 'java'
    apply plugin: 'org.xtext.xtend'
    apply from: "${rootDir}/gradle/source-layout.gradle"
    apply from: "${rootDir}/gradle/maven-deployment.gradle"
    apply plugin: 'eclipse'

    group = 'org.testeditor'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    configurations.all {
	    exclude group: 'asm'
        resolutionStrategy {
            force "org.antlr:antlr-runtime:${antlrRuntime}"
            force "org.eclipse.emf:org.eclipse.emf.ecore:${xtextVersion}"
        }
    }

    test {
        // configure logging within tests (see https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.logging.TestLogging.html)
        // show standard out during test to see logging output
        testLogging.showStandardStreams = true
        // make sure that assertion failures are reported more verbose!
        testLogging.exceptionFormat = 'full'

        // report finished test with status
        afterTest { desc, result ->
            logger.quiet "${result.resultType}: ${desc.name} [${desc.className}]"
        }

        maxParallelForks = Runtime.runtime.availableProcessors()
    }
}

// all projects are released, except those ending on '.testing' or '.web'!
configure(subprojects.findAll {!it.name.endsWith('.testing') && !it.name.endsWith('.web')}) {
    apply plugin: 'net.researchgate.release'

    release {
        preTagCommitMessage = '[release]'
        tagCommitMessage = '[release]'
        newVersionCommitMessage = '[release] new version'
        tagTemplate = 'v${version}'
        buildTasks = []
    }
}

// all projects depend on org.testeditor.loggong, except those ending on loggin!
configure(subprojects.findAll {!it.name.endsWith('.logging')}) {
    dependencies {
        compile project(':org.testeditor.logging')
    }
}

// all projects depend on common.testing, except those project, ending on testing!
configure(subprojects.findAll {!it.name.endsWith('.testing')}) {
    dependencies {
        testCompile project(':org.testeditor.dsl.common.testing')
    }
}

// all web projects depend on these libraries
configure(subprojects.findAll {it.name.endsWith('.web')}) {
    dependencies {
	    compile "org.eclipse.xtext:org.eclipse.xtext.xbase.web:${xtextVersion}"
	    compile "org.eclipse.xtext:org.eclipse.xtext.web.servlet:${xtextVersion}"
	    compile "org.eclipse.xtend:org.eclipse.xtend.lib:${xtextVersion}"
	    compile "org.webjars:requirejs:${requirejsVersion}"
	    compile "org.webjars:jquery:${jqueryVersion}"
	    compile "org.webjars:ace:${aceEditorVersion}"
    }
}

// all language generating projects depend on these libraries and run mwe2 tasks
configure(subprojects.findAll {it.name.endsWith('.dsl')}) {
    dependencies {
        compile "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
        compile "org.eclipse.xtext:org.eclipse.xtext.xbase:${xtextVersion}"

        testCompile project(':org.testeditor.dsl.common.testing')
        testCompile "org.eclipse.xtext:org.eclipse.xtext.builder.standalone:${xtextVersion}"
        testCompile "org.eclipse.xtext:org.eclipse.xtext.testing:${xtextVersion}"
        testCompile "org.eclipse.xtext:org.eclipse.xtext.xbase.testing:${xtextVersion}"
    }

    configurations {
        mwe2 {
	        extendsFrom compile
        }
    }

    dependencies {
        mwe2 "org.eclipse.emf:org.eclipse.emf.mwe2.launch:${mwe2LaunchVersion}"
        mwe2 "org.eclipse.xtext:org.eclipse.xtext.common.types:${xtextVersion}"
        mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${xtextVersion}"
        mwe2 "org.eclipse.xtext:xtext-antlr-generator:${antlrGeneratorVersion}"
        // added for Xcore support
        mwe2 "org.eclipse.emf:org.eclipse.emf.ecore.xcore:${emfEcoreXcore}"
        mwe2 "org.eclipse.emf:org.eclipse.emf.codegen.ecore.xtext:${codegenEcoreXtext}"
    }
}

// all xcore model projects have these dependencies, include the model source into the jar,
// and configure xtext to know about ecore, codegen and xcore!
configure(subprojects.findAll {it.name.endsWith('.model')}) {
    dependencies {
        compile "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
        compile "org.eclipse.xtext:org.eclipse.xtext.xbase:${xtextVersion}"
        compile "org.eclipse.emf:org.eclipse.emf.ecore.xcore.lib:${emfEcoreXcoreLib}" // +

        xtextLanguages "org.eclipse.emf:org.eclipse.emf.common:${xtextVersion}"
        xtextLanguages "org.eclipse.emf:org.eclipse.emf.ecore:${xtextVersion}"
        xtextLanguages "org.eclipse.emf:org.eclipse.emf.ecore.xcore:${emfEcoreXcore}"
        xtextLanguages "org.eclipse.emf:org.eclipse.emf.ecore.xcore.lib:${emfEcoreXcoreLib}"
        xtextLanguages "org.eclipse.emf:org.eclipse.emf.codegen:${emfCodegenVersion}"
        xtextLanguages "org.eclipse.emf:org.eclipse.emf.codegen.ecore:${xtextVersion}"
        xtextLanguages "org.eclipse.emf:org.eclipse.emf.codegen.ecore.xtext:${codegenEcoreXtext}"
        xtextLanguages "org.eclipse.xtext:org.eclipse.xtext.ecore:${xtextVersion}"
        xtextLanguages "org.eclipse.emf:org.eclipse.emf.mwe2.runtime:${mwe2LaunchVersion}"
    }

    sourceSets {
        main {
            resources {
                exclude '**/*.xcore'
            }
            java {
                srcDir 'build/xcore/main'
            }
        }
    }

    // include model xcore source into resulting jar
    jar {
        into('model') {
            from('src/main/resources') {
                include '**/*.xcore'
            }
        }
    }

    xtext {
        version = "${xtextVersion}"
        languages {
            ecore {
                setup = 'org.eclipse.xtext.ecore.EcoreSupport'
            }
            codegen {
                setup = 'org.eclipse.emf.codegen.ecore.xtext.GenModelSupport'
            }
            xcore {
                setup = 'org.eclipse.emf.ecore.xcore.XcoreStandaloneSetup'
                generator.outlet.producesJava = true
            }
        }
    }
}

def String getBranchName() {
    def branch = ''
    def proc = 'git rev-parse --abbrev-ref HEAD'.execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    return branch
}
