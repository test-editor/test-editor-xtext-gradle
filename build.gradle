buildscript {
    repositories {
	jcenter()
        mavenCentral()
	maven {
	    url "https://plugins.gradle.org/m2/"
	}
    }
    dependencies {
	classpath 'org.xtext:xtext-gradle-plugin:2.0.1'
    }
}

plugins {
    id 'net.researchgate.release' version '2.4.0'
}

subprojects {
    ext.xtextVersion = '2.15.0'
    repositories {
	jcenter()
        mavenCentral()
        maven { url "http://dl.bintray.com/test-editor/maven/" }
    }

    apply plugin: 'java'
    apply plugin: 'org.xtext.xtend'
    apply from: "${rootDir}/gradle/source-layout.gradle"
    apply from: "${rootDir}/gradle/maven-deployment.gradle"
    apply plugin: 'eclipse'

    group = 'org.testeditor.'
    version = '2.0.0-SNAPSHOT'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    dependencies {
        testCompile 'junit:junit:4.12'
        testCompile "org.mockito:mockito-core:2.22.+"
    }

    configurations.all {
	exclude group: 'asm'
        resolutionStrategy {
            force 'org.antlr:antlr-runtime:3.2'
            force 'org.eclipse.emf:org.eclipse.emf.ecore:2.15.0'
        }
    }

    test {
        // configure logging within tests (see https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.logging.TestLogging.html)
        // show standard out during test to see logging output
        testLogging.showStandardStreams = true
        // make sure that assertion failures are reported more verbose!
        testLogging.exceptionFormat = 'full'

        afterTest { desc, result ->
            logger.quiet "${result.resultType}: ${desc.name} [${desc.className}]"
        }

        maxParallelForks = Runtime.runtime.availableProcessors()
    }
}

configure(subprojects.findAll {!it.name.endsWith('.testing')}) {
    dependencies {
        testCompile project(':org.testeditor.dsl.common.testing')
    }
}

configure(subprojects.findAll {it.name.endsWith('.web')}) {
    dependencies {
	compile "org.eclipse.xtext:org.eclipse.xtext.xbase.web:${xtextVersion}"
	compile "org.eclipse.xtext:org.eclipse.xtext.web.servlet:${xtextVersion}"
	compile "org.eclipse.xtend:org.eclipse.xtend.lib:${xtextVersion}"
	compile "org.webjars:requirejs:2.3.2"
	compile "org.webjars:jquery:2.2.+"
	compile "org.webjars:ace:1.2.3"
    }
}

configure(subprojects.findAll {!it.name.endsWith('.logging')}) {
    dependencies {
        compile project(':org.testeditor.logging')
    }
}

configure(subprojects.findAll {it.name.endsWith('.dsl')}) {
    dependencies {
        compile "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
        compile "org.eclipse.xtext:org.eclipse.xtext.xbase:${xtextVersion}"

        testCompile project(':org.testeditor.dsl.common.testing')
        testCompile "org.eclipse.xtext:org.eclipse.xtext.builder.standalone:${xtextVersion}"
        testCompile "org.eclipse.xtext:org.eclipse.xtext.testing:${xtextVersion}"
        testCompile "org.eclipse.xtext:org.eclipse.xtext.xbase.testing:${xtextVersion}"
    }

    configurations {
        mwe2 {
	    extendsFrom compile
        }
    }

    dependencies {
        mwe2 "org.eclipse.emf:org.eclipse.emf.mwe2.launch:2.9.1.201705291010"
        mwe2 "org.eclipse.xtext:org.eclipse.xtext.common.types:${xtextVersion}"
        mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${xtextVersion}"
        mwe2 "org.eclipse.xtext:xtext-antlr-generator:[2.1.1, 3)"
        // added for Xcore support
        mwe2 'org.eclipse.emf:org.eclipse.emf.ecore.xcore:+'
        mwe2 'org.eclipse.emf:org.eclipse.emf.codegen.ecore.xtext:+'
    }

}

configure(subprojects.findAll {it.name.endsWith('.model')}) {
    dependencies {
        compile "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
        compile "org.eclipse.xtext:org.eclipse.xtext.xbase:${xtextVersion}"
        compile 'org.eclipse.emf:org.eclipse.emf.ecore.xcore.lib:+'

        xtextLanguages "org.eclipse.emf:org.eclipse.emf.common:${xtextVersion}"
        xtextLanguages "org.eclipse.emf:org.eclipse.emf.ecore:${xtextVersion}"
        xtextLanguages 'org.eclipse.emf:org.eclipse.emf.ecore.xcore:+'
        xtextLanguages 'org.eclipse.emf:org.eclipse.emf.ecore.xcore.lib:+'
        xtextLanguages 'org.eclipse.emf:org.eclipse.emf.codegen:2.14.0'
        xtextLanguages 'org.eclipse.emf:org.eclipse.emf.codegen.ecore:${xtextVersion}'
        xtextLanguages 'org.eclipse.emf:org.eclipse.emf.codegen.ecore.xtext:+'
        xtextLanguages "org.eclipse.xtext:org.eclipse.xtext.ecore:${xtextVersion}"
        xtextLanguages 'org.eclipse.emf:org.eclipse.emf.mwe2.runtime:+'
    }

    sourceSets {
        main {
            resources {
                exclude '**/*.xcore'
            }
            java {
                srcDir 'build/xcore/main'
            }
        }
    }

    jar {
        into('model') {
            from('src/main/resources') {
                include '**/*.xcore'
            }
        }
    }

    xtext {
        version = "${xtextVersion}"
        languages {
            ecore {
                setup = 'org.eclipse.xtext.ecore.EcoreSupport'
            }
            codegen {
                setup = 'org.eclipse.emf.codegen.ecore.xtext.GenModelSupport'
            }
            xcore {
                setup = 'org.eclipse.emf.ecore.xcore.XcoreStandaloneSetup'
                generator.outlet.producesJava = true
            }
        }
    }
}

release {
    preTagCommitMessage = '[release]'
    tagCommitMessage = '[release]'
    newVersionCommitMessage = '[release] new version'
    tagTemplate = 'v${version}'
    buildTasks = []
}

def String getBranchName() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    return branch
}
